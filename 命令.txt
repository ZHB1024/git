学习地址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000
https://www.yiibai.com/git/git-quick-start.html

几种状态:
Untracked          Unmodified       Modified      Staged
 
 
----------------------------------------------------命令-------------------------------------
-----使用git命令初始化库-------
进入到某个文件夹
cd c:
cd gittest
git init

-------从github中clone---------
git clone git@github.com:ZHB1024/gitskills.git  gittest


--------创建文件夹及文件-----------
mkdir test
cd test

在test目录创建一个test.txt
git add test.txt
git commit -m "init test file"

修改test.txt文件
git commit -a -m "skip add test"
或
git add test.txt
git commit -m "update test file"


---------查看某个文件内容------------
cat test.txt


----------查看文件状态---------------
git status
或
git status -s
或
git status -short

新添加的未跟踪文件前面有 ?? 标记
新添加到暂存区中的文件前面有 A 标记
出现在右边的 M 表示该文件被修改了但是还没放入暂存区
出现在靠左边的 M 表示该文件被修改了并放入了暂存区
MM表示 在工作区被修改并提交到暂存区后又在工作区中被修改了

只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动
git diff 
git difftool 命令来用 Araxis ，emerge 或 vimdiff 等软件输出 diff 分析结果。 
使用 git difftool --tool-help 命令来看你的系统支持哪些 Git Diff 插件。

查看已经暂存起来的变化：(--staged 和 --cached 是同义词)
git diff --cached 


------------检出文件，从资源库-----------
git checkout -- readme.txt



---------------查看日志---------------
最近的更新排在最上面
git log
最近两次提交
git log -2
每次提交的内容差异
git log -p
每次提交的简略的统计信息
git log --stat


---------------------------------------撤销操作--------------------------
撤销暂存区的文件
git reset HEAD mytext.txt

git reset --hard HEAD~1
git reset --hard 7686d1555163583196b769920ea2ab444605c323              commit id

git reflog
git diff HEAD -- readme.txt


ssh-keygen -t rsa -C "2278164417@qq.com"



--------------------------------------------删除------------------------------------------
从暂存区域移除，然后提交

rm test.txt

告诉你哪些文件被删除了
git status

确定要删除
git rm text.txt
git commit -m "删除test.txt"

反悔了
git checkout -- test.txt

--------------------------------------------修改文件名------------------------------------------
git mv zhb02.txt zhb03.txt
git commit -m "mv file"


-----------------------------------------添加远程库---------------------------------------
在github上创建库 git-test
在本地git bash 命令行中执行
git remote add origin git@github.com:ZHB1024/git-test.git
git push -u origin master
刷新github上的git-test库 可以看到已上传

从github库中下载到git库中
git pull origin
拉取仓库中有但你没有的信息
git fetch origin

----------------------------------------查看远程仓库----------------------------------
git remote -v
git remote show origin


---------------------------------------远程仓库的移除与重命名---------------------------
git remote rename gs newgs
git remote rm newgs



-----------------------------------------添加忽略文件--------------------------------------------
在git资源库中，新建 .gitignore 文件，window系统可以另存为 .gitignore
在 .gitignore 文件中增加：
#忽略 .o .a 文件
*.[oa]        

官网 https://github.com/github/gitignore 有现成的忽略模板
java的模板为：
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*


--------------------------------------------创建分支-------------------------------------------
查看分支
git branch
创建dev分支
git checkout -b dev

新建一个文件branch.txt 提交

切换到master
git checkout master
合并分支dev,这时master中就有branch.txt了
git merge dev

合并后就可以删除分支了
git branch -d dev
-----------------------------解决分支冲突--------------------
创建feature分支
git checkout -b feature

修改branch.txt文件 增加：this is feature1 branch
然后 git commit -a -m "branch feature update"

切到master
git checkout master
修改branch.txt文件 增加：this is master
然后 git commit -a -m "master update"

git merge feature
cat branch.txt
显示一下内容：
<<<<<<< HEAD
this is master
=======
this is feature1 branch
>>>>>>> feature1

修改 branch.txt 文件后 提交就可以了

查看分支合并图
git log --graph


--------------------------------------------------------

